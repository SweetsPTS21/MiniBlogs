openapi: '3.0.1'

info:
  title: "My API"
  description: "My API description"
  version: "1.0.0"

servers:
  - url: "http://localhost:8080/api/v1"
    description: "Local server"

tags:
  - name: "blogs"
    description: "Blogs operations"
  - name: "contact"
    description: "Contact from user"

security:
  - bearerAuth: []

paths:
  /blogs:
    get:
      summary: "Get all blogs"
      operationId: "getAllBlogs"
      tags:
        - "blogs"
      parameters:
        - name: limit
          in: query
          description: The number of blogs to return
          required: true
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: The number of blogs to skip
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          $ref: '#/components/responses/Blogs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: "Create a blog"
      operationId: "createBlog"
      tags:
        - "blogs"
      requestBody:
        description: "Blog to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlogReq"
      responses:
        '200':
          $ref: '#/components/responses/Blog'
        '201':
          $ref: '#/components/responses/Blog'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /blogs/search:
    get:
      summary: Get blogs by filter
      operationId: "getBlogsByFilter"
      tags:
        - "blogs"
      parameters:
        - name: key
          in: query
          description: The name or Id of the blog to search
          required: false
          schema:
            type: string
        - name: approve
          in: query
          description: The approval status to search
          required: false
          schema:
            type: boolean
      responses:
        '200':
          $ref: '#/components/responses/Blogs'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /blogs/{id}:
    get:
        summary: "Get a blog by id"
        operationId: "getBlogById"
        tags:
            - "blogs"
        parameters:
            - name: "id"
              in: "path"
              description: "Blog id"
              required: true
              schema:
                  type: string
        responses:
          '200':
            $ref: '#/components/responses/Blog'
          '201':
            $ref: '#/components/responses/Blog'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '403':
            $ref: '#/components/responses/Forbidden'
          '404':
            $ref: '#/components/responses/NotFound'
          '500':
            $ref: '#/components/responses/InternalServerError'
    put:
        summary: "Update a blog"
        operationId: "updateBlog"
        tags:
            - "blogs"
        parameters:
            - name: "id"
              in: "path"
              description: "Blog id"
              required: true
              schema:
                type: string
        requestBody:
            description: "Blog to update"
            required: true
            content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/BlogReq"
        responses:
          '200':
            $ref: '#/components/responses/Blog'
          '201':
            $ref: '#/components/responses/Blog'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '403':
            $ref: '#/components/responses/Forbidden'
          '404':
            $ref: '#/components/responses/NotFound'
          '500':
            $ref: '#/components/responses/InternalServerError'
    delete:
        summary: "Delete a blog"
        operationId: "deleteBlog"
        tags:
            - "blogs"
        parameters:
            - name: "id"
              in: "path"
              description: "Blog id"
              required: true
              schema:
                type: string
        responses:
          '200':
            $ref: '#/components/responses/Blog'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '403':
            $ref: '#/components/responses/Forbidden'
          '404':
            $ref: '#/components/responses/NotFound'
          '500':
            $ref: '#/components/responses/InternalServerError'
    patch:
        summary: "Approve a blog"
        operationId: "approveBlog"
        tags:
            - "blogs"
        parameters:
            - name: "id"
              in: "path"
              description: "Blog id"
              required: true
              schema:
                type: string
        responses:
          '200':
            $ref: '#/components/responses/Blog'
          '201':
            $ref: '#/components/responses/Blog'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '403':
            $ref: '#/components/responses/Forbidden'
          '404':
            $ref: '#/components/responses/NotFound'
          '500':
            $ref: '#/components/responses/InternalServerError'
  /contact:
    get:
        summary: "Get contact info"
        operationId: "getContactInfo"
        tags:
            - "contact"
        responses:
          '200':
            $ref: '#/components/responses/Contacts'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '403':
            $ref: '#/components/responses/Forbidden'
          '404':
            $ref: '#/components/responses/NotFound'
          '500':
            $ref: '#/components/responses/InternalServerError'
    post:
        summary: "Create contact info"
        operationId: "createContactInfo"
        tags:
            - "contact"
        requestBody:
            description: "Contact info"
            required: true
            content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Contact"
        responses:
          '200':
            $ref: '#/components/responses/Contact'
          '201':
            $ref: '#/components/responses/Contact'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '403':
            $ref: '#/components/responses/Forbidden'
          '404':
            $ref: '#/components/responses/NotFound'
          '500':
            $ref: '#/components/responses/InternalServerError'
components:
    schemas:
        Blog:
          type: object
          required:
              - id
              - title
              - content
          properties:
              id:
                type: string
                minLength: 20
                example: '65320297d344e36796822b5e'
              title:
                type: string
                minLength: 10
                example: 'My blog title'
              summary:
                type: string
                example: 'My blog summary'
              publicDate:
                type: string
                example: '2020-01-01T00:00:00.000Z'
              source:
                type: string
                example: 'https://www.google.com'
              image:
                type: string
                example: 'https://www.google.com'
              content:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                      example: 'part 1'
                    detail:
                      type: string
                      example: 'part 1 detail'
              categories:
                type: array
                items:
                  type: string
                  minLength: 20
                  example: '65320297d344e36796822b5e'
              author:
                type: string
                minLength: 20
                example: 'Lolia'
              createDate:
                type: string
                example: '2020-01-01T00:00:00.000Z'
              updateDate:
                type: string
                example: '2020-01-01T00:00:00.000Z'
              approved:
                type: boolean
                example: true
        Blogs:
          type: array
          items:
            $ref: '#/components/schemas/Blog'
        Contact:
          type: object
          required:
            - email
            - name
            - message
          properties:
            email:
              type: string
              format: email
              example: 'abc@gmail.com'
            name:
                type: string
                example: 'Thanh Nam'
            message:
                type: string
                example: 'Xin chao Lolia'
        Contacts:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
        BlogReq:
          type: object
          required:
            - title
            - content
            - author
            - categoryIds
          properties:
            title:
              type: string
              minLength: 10
              example: 'My blog title'
            summary:
                type: string
                example: 'My blog summary'
            image:
                type: string
                example: 'https://www.google.com'
            publicDate:
              type: string
              example: '2020-01-01T00:00:00.000Z'
            source:
              type: string
              example: 'https://www.google.com'
            content:
              type: array
              items:
                type: object
                properties:
                  title:
                    type: string
                    example: 'part 1'
                  detail:
                    type: string
                    example: 'part 1 detail'
            author:
              type: string
              minLength: 20
              example: 'Lolia'
            categories:
              type: array
              items:
                type: string
                minLength: 20
                example: '65320297d344e36796822b5e'
        BlogApproveReq:
          type: object
          required:
            - id
            - blogId
            - approved
            - author
          properties:
            id:
              type: string
              minLength: 20
              example: '65320297d344e36796822b5e'
            approved:
              type: boolean
              example: true
            blogId:
              type: string
              minLength: 20
              example: '65320297d344e36796822b5e'
            author:
              type: string
              minLength: 20
              example: 'Lolia'
        Error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: integer
              format: int32
              example: 400
            message:
              type: string
              example: 'Bad Request'
    responses:
      Blog:
        description: "Blog"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Blog"
      Blogs:
        description: "Blogs"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Blogs"
      Contact:
        description: "Contact"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Contact"
      Contacts:
        description: "Contacts"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Contacts"
      Error:
        description: "Error"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"
      OK:
        description: OK
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
      Created:
        description: Created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
      BadRequest:
        description: Bad Request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
      Unauthorized:
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
      Forbidden:
        description: Forbidden
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
      NotFound:
        description: Not Found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
      InternalServerError:
        description: Internal Server Error
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'

